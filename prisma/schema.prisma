// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TestUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("test_users")
}

// 사용자 정보
model User {
  id                        String        @id @default(cuid())
  email                     String        @unique
  name                      String?       
  password                  String?       
  type                      SIGN_UP_TYPE  @default(EMAIL)
  role                      Role          @default(USER)
  status                    Status        @default(ACTIVE)
  lastLoginAt               DateTime?   
  profileImage              String?  
  phoneNumber               String?       @unique
  emailVerified             Boolean?      @default(false) //이메일 인증 여부
  twoFactorEnabled          Boolean       @default(false) //2단계 인증 여부
  resetPasswordToken        String?                       //비밀번호 초기화 토큰
  resetPasswordTokenExpires DateTime?                     //비밀번호 초기화 토큰 만료일
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt

  // 적립금 정보 1:1
  point Point?
  // 적립금 히스토리 1:N
  pointHistory PointHistory[]

  @@map("TB_USER")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum SIGN_UP_TYPE {
  EMAIL
  KAKAO
  GOOGLE
}

// 적립금 정보
model Point {
  id String @id @default(cuid())
  userId String @unique
  point Int @default(0)
  reason String? // 적립 이유
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 사용자 id 1:1
  user User @relation(fields: [userId], references: [id])
  // 적립금 히스토리 1:N
  pointHistory PointHistory[]
  
  @@map("TB_POINT")
}

// 적립금 히스토리
model PointHistory {
  id String @id @default(cuid())
  userId String
  point Int
  reason String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 적립금 id 1:1
  pointId Point @relation(fields: [id], references: [id])
  // 사용자 id N:1
  user User @relation(fields: [userId], references: [id])

  @@map("TB_POINT_HISTORY")
}